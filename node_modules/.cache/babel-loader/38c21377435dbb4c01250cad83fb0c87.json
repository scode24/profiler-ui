{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soumyabs\\\\Documents\\\\Projects\\\\ReactApp\\\\profiler-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport { useState, useEffect } from 'react';\nimport useScreenType from 'react-screentype-hook';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport About from './components/About';\nimport Skills from './components/Skills';\nimport WorkingExp from './components/WorkingExp';\nimport Qualification from './components/Qualification';\nimport Achievements from './components/Achievements';\nimport * as service from './services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const screenType = useScreenType();\n  const [cardState, setCardState] = useState({\n    isTitleOpen: true,\n    isMenuOpen: false,\n    isInfoOpen: false\n  });\n  useEffect(() => {\n    let url = window.location.href;\n    url = url.replace('http://', '');\n    url = url.replace('https://', '');\n    const email = url.split('/')[1];\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: false,\n        isMenuOpen: true,\n        isInfoOpen: true\n      });\n    }\n    service.getMenuList(email).then(response => {\n      console.log(response);\n    });\n  }, [screenType.isTablet]);\n  const getNextPage = page => {};\n  const toggleCard = cardName => {\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: !cardState.isTitleOpen,\n        isMenuOpen: !cardState.isMenuOpen,\n        isInfoOpen: !cardState.isInfoOpen\n      });\n    } else {\n      switch (cardName) {\n        case 'title':\n          setCardState({\n            isTitleOpen: !cardState.isTitleOpen,\n            isMenuOpen: false,\n            isInfoOpen: false\n          });\n          break;\n        case 'menu':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: !cardState.isMenuOpen,\n            isInfoOpen: false\n          });\n          break;\n        case 'info':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: false,\n            isInfoOpen: !cardState.isInfoOpen\n          });\n          break;\n        default:\n          console.log('Option not identified');\n          break;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      toggleCard: toggleCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:email\",\n          element: /*#__PURE__*/_jsxDEV(Main, {\n            state: cardState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 42\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"about\",\n            element: /*#__PURE__*/_jsxDEV(About, {\n              next: () => getNextPage('About')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"skills\",\n            element: /*#__PURE__*/_jsxDEV(Skills, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"qualification\",\n            element: /*#__PURE__*/_jsxDEV(Qualification, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"workingExp\",\n            element: /*#__PURE__*/_jsxDEV(WorkingExp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"achievements\",\n            element: /*#__PURE__*/_jsxDEV(Achievements, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2V1Phzj52MxDrudKxxUtnekfIj8=\", false, function () {\n  return [useScreenType];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Main","useState","useEffect","useScreenType","BrowserRouter","Routes","Route","About","Skills","WorkingExp","Qualification","Achievements","service","App","screenType","cardState","setCardState","isTitleOpen","isMenuOpen","isInfoOpen","url","window","location","href","replace","email","split","isTablet","getMenuList","then","response","console","log","getNextPage","page","toggleCard","cardName"],"sources":["C:/Users/soumyabs/Documents/Projects/ReactApp/profiler-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport { useState, useEffect } from 'react';\nimport useScreenType from 'react-screentype-hook';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport About from './components/About';\nimport Skills from './components/Skills';\nimport WorkingExp from './components/WorkingExp';\nimport Qualification from './components/Qualification';\nimport Achievements from './components/Achievements';\nimport * as service from './services';\n\nfunction App() {\n\n  const screenType = useScreenType();\n  const [cardState, setCardState] = useState({\n    isTitleOpen: true,\n    isMenuOpen: false,\n    isInfoOpen: false\n  });\n\n  useEffect(() => {\n\n    let url = window.location.href;\n    url = url.replace('http://', '');\n    url = url.replace('https://', '');\n    const email = url.split('/')[1];\n\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: false,\n        isMenuOpen: true,\n        isInfoOpen: true\n      })\n    }\n\n    service.getMenuList(email)\n      .then(response => {\n        console.log(response);\n      })\n\n\n  }, [screenType.isTablet])\n\n  const getNextPage = (page) => {\n\n  }\n\n  const toggleCard = (cardName) => {\n\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: !cardState.isTitleOpen,\n        isMenuOpen: !cardState.isMenuOpen,\n        isInfoOpen: !cardState.isInfoOpen\n      })\n    } else {\n      switch (cardName) {\n        case 'title':\n          setCardState({\n            isTitleOpen: !cardState.isTitleOpen,\n            isMenuOpen: false,\n            isInfoOpen: false\n          });\n          break;\n        case 'menu':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: !cardState.isMenuOpen,\n            isInfoOpen: false\n          });\n          break;\n        case 'info':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: false,\n            isInfoOpen: !cardState.isInfoOpen\n          });\n          break;\n        default:\n          console.log('Option not identified');\n          break;\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Header toggleCard={toggleCard} />\n\n      <BrowserRouter>\n        <Routes>\n          <Route path='/:email' element={<Main state={cardState} />}>\n            <Route path='about' element={<About next={() => getNextPage('About')} />} />\n            <Route path='skills' element={<Skills />} />\n            <Route path='qualification' element={<Qualification />} />\n            <Route path='workingExp' element={<WorkingExp />} />\n            <Route path='achievements' element={<Achievements />} />\n          </Route>\n        </Routes>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}