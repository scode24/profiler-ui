{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soumyabs\\\\Documents\\\\Projects\\\\ReactApp\\\\profiler-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport { useState, useEffect } from 'react';\nimport useScreenType from 'react-screentype-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const screenType = useScreenType();\n  const [cardState, setCardState] = useState({\n    isTitleOpen: true,\n    isMenuOpen: false,\n    isInfoOpen: false\n  });\n  useEffect(() => {\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: false,\n        isMenuOpen: true,\n        isInfoOpen: true\n      });\n    }\n  }, [screenType.isTablet]);\n  const toggleCard = cardName => {\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: !cardState.isTitleOpen,\n        isMenuOpen: !cardState.isMenuOpen,\n        isInfoOpen: !cardState.isInfoOpen\n      });\n    } else {\n      switch (cardName) {\n        case 'title':\n          setCardState({\n            isTitleOpen: !cardState.isTitleOpen,\n            isMenuOpen: false,\n            isInfoOpen: false\n          });\n          break;\n        case 'menu':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: !cardState.isMenuOpen,\n            isInfoOpen: false\n          });\n          break;\n        case 'info':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: false,\n            isInfoOpen: !cardState.isInfoOpen\n          });\n          break;\n        default:\n          console.log('Option not identified');\n          break;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      toggleCard: toggleCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      state: cardState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2V1Phzj52MxDrudKxxUtnekfIj8=\", false, function () {\n  return [useScreenType];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Main","useState","useEffect","useScreenType","App","screenType","cardState","setCardState","isTitleOpen","isMenuOpen","isInfoOpen","isTablet","toggleCard","cardName","console","log"],"sources":["C:/Users/soumyabs/Documents/Projects/ReactApp/profiler-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport { useState, useEffect } from 'react';\nimport useScreenType from 'react-screentype-hook';\n\nfunction App() {\n\n  const screenType = useScreenType();\n\n  const [cardState, setCardState] = useState({\n    isTitleOpen: true,\n    isMenuOpen: false,\n    isInfoOpen: false\n  });\n\n  useEffect(() => {\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: false,\n        isMenuOpen: true,\n        isInfoOpen: true\n      })\n    }\n  }, [screenType.isTablet])\n\n\n\n  const toggleCard = (cardName) => {\n\n    if (screenType.isTablet) {\n      setCardState({\n        isTitleOpen: !cardState.isTitleOpen,\n        isMenuOpen: !cardState.isMenuOpen,\n        isInfoOpen: !cardState.isInfoOpen\n      })\n    } else {\n      switch (cardName) {\n        case 'title':\n          setCardState({\n            isTitleOpen: !cardState.isTitleOpen,\n            isMenuOpen: false,\n            isInfoOpen: false\n          });\n          break;\n        case 'menu':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: !cardState.isMenuOpen,\n            isInfoOpen: false\n          });\n          break;\n        case 'info':\n          setCardState({\n            isTitleOpen: false,\n            isMenuOpen: false,\n            isInfoOpen: !cardState.isInfoOpen\n          });\n          break;\n        default:\n          console.log('Option not identified');\n          break;\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Header toggleCard={toggleCard} />\n      <Main state={cardState} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,uBAAuB;AAAC;AAElD,SAASC,GAAG,GAAG;EAAA;EAEb,MAAMC,UAAU,GAAGF,aAAa,EAAE;EAElC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC;IACzCO,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACd,IAAIG,UAAU,CAACM,QAAQ,EAAE;MACvBJ,YAAY,CAAC;QACXC,WAAW,EAAE,KAAK;QAClBC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACL,UAAU,CAACM,QAAQ,CAAC,CAAC;EAIzB,MAAMC,UAAU,GAAIC,QAAQ,IAAK;IAE/B,IAAIR,UAAU,CAACM,QAAQ,EAAE;MACvBJ,YAAY,CAAC;QACXC,WAAW,EAAE,CAACF,SAAS,CAACE,WAAW;QACnCC,UAAU,EAAE,CAACH,SAAS,CAACG,UAAU;QACjCC,UAAU,EAAE,CAACJ,SAAS,CAACI;MACzB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,QAAQG,QAAQ;QACd,KAAK,OAAO;UACVN,YAAY,CAAC;YACXC,WAAW,EAAE,CAACF,SAAS,CAACE,WAAW;YACnCC,UAAU,EAAE,KAAK;YACjBC,UAAU,EAAE;UACd,CAAC,CAAC;UACF;QACF,KAAK,MAAM;UACTH,YAAY,CAAC;YACXC,WAAW,EAAE,KAAK;YAClBC,UAAU,EAAE,CAACH,SAAS,CAACG,UAAU;YACjCC,UAAU,EAAE;UACd,CAAC,CAAC;UACF;QACF,KAAK,MAAM;UACTH,YAAY,CAAC;YACXC,WAAW,EAAE,KAAK;YAClBC,UAAU,EAAE,KAAK;YACjBC,UAAU,EAAE,CAACJ,SAAS,CAACI;UACzB,CAAC,CAAC;UACF;QACF;UACEI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACpC;MAAM;IAEZ;EACF,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,MAAM;MAAC,UAAU,EAAEH;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eAClC,QAAC,IAAI;MAAC,KAAK,EAAEN;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACtB;AAEV;AAAC,GAlEQF,GAAG;EAAA,QAESD,aAAa;AAAA;AAAA,KAFzBC,GAAG;AAoEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}